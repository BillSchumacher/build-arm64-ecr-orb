description: >
  Configures aws cli, builds a docker image and pushes it to ecr.

executor: default

orbs:
  aws-ecr: circleci/aws-ecr@8.1.2
  aws-ecs: circleci/aws-ecs@2.2.1

parameters:
  profile:
    type: string
    default: "default"
    description: "aws profile"
  dockerfile:
    type: string
    default: "Dockerfile"
    description: "the dockerfile"
steps:
  - checkout
  - run:
      name: "Configure AWS"
      command: |
        aws configure set aws_access_key_id \
            "$AWS_ACCESS_KEY_ID" \
            --profile "<< parameters.profile >>"

        aws configure set aws_secret_access_key \
            "$AWS_SECRET_ACCESS_KEY" \
            --profile "<< parameters.profile >>"

        if [ -n "${AWS_SESSION_TOKEN}" ]; then
            aws configure set aws_session_token \
                "${AWS_SESSION_TOKEN}" \
                --profile "<< parameters.profile >>"
        fi

        aws configure set default.region "$AWS_DEFAULT_REGION" \
            --profile "<< parameters.profile >>"
        aws configure set region "$AWS_DEFAULT_REGION" \
            --profile "<< parameters.profile >>"
  - run:
      name: "Build docker image and push"
      command: |
        ACCOUNT_URL=${AWS_ECR_REGISTRY_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
        if cat ~/.docker/config.json | grep "${ACCOUNT_URL}" > /dev/null 2>&1 ; then
            echo "Credential helper is already installed"
        else
            aws ecr get-login-password --region "${AWS_DEFAULT_REGION}" "$@" | docker login --username AWS --password-stdin "${ACCOUNT_URL}"
        fi
        IMAGE_AND_TAG=${AWS_RESOURCE_NAME_PREFIX}:${CIRCLE_SHA1}
        docker build -f << parameters.dockerfile >> . -t $IMAGE_AND_TAG
        docker tag $IMAGE_AND_TAG $ACCOUNT_URL/$IMAGE_AND_TAG
        docker push $ACCOUNT_URL/$IMAGE_AND_TAG